<?php

namespace My\CMSBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CMSArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CMSArticleRepository extends EntityRepository
{
    /**
     * Get articles
     *
     * @param string $order
     * @param string $sequence
     * @param string $filter
     * @param string $languageId
     * @param string $groupId
     * @return array
     */
	public function getArticlesQB($order, $sequence, $filter, $languageId, $groupId)
	{
		$qb = $this->createQueryBuilder('a')
            ->leftJoin('a.language', 'l')
            ->leftJoin('a.series', 's');

        $this->addNameFilterQB($qb, $filter);
        $this->addLanguageIdFilterQB($qb, $languageId);
        $this->addGroupFilterQB($qb, $groupId);

        $qb->orderBy($order, $sequence);

		return $qb->getQuery();
	}

    /**
     * Search
     *
     * @param string $locale
     * @param string $search
     * @return array
     */
    public function search($locale, $search)
    {
        $qb = $this->createQueryBuilder('a')
            ->leftJoin('a.language', 'l')
            ->where('a.isPublic = true');

        $this->addLanguageAliasFilter($qb, $locale);
        $this->addNameFilterQB($qb, $search);

        return $qb->getQuery()->getResult();
    }

    /**
     * Add language alias filter
     *
     * @param QueryBuilde $qb
     * @param string $alias
     */
    private function addLanguageAliasFilter($qb, $alias = null)
    {
        if (null != $alias) {
            $qb->andWhere('l.alias = :alias')
               ->setParameter('alias', $alias);
        }
    }

    /**
     * Add name filter
     *
     * @param QueryBuilde $qb
     * @param string $filter
     */
    private function addNameFilterQB($qb, $filter = null)
    {
        if (null != $filter) {
            $qb->andWhere($qb->getRootAlias().'.name LIKE :filter')
               ->setParameter('filter', '%'.$filter.'%');
        }
    }

    /**
     * Add language filter
     *
     * @param QueryBuilde $qb
     * @param string $filter
     */
    private function addLanguageIdFilterQB($qb, $languageId = null)
    {
        if (null != $languageId) {
            $qb->andWhere('l.id = :languageId')
               ->setParameter('languageId', $languageId);
        }
    }

    /**
     * Add group filter
     *
     * @param QueryBuilde $qb
     * @param string $filter
     */
    private function addGroupFilterQB($qb, $groupId = null)
    {
        if (null != $groupId) {
            $qb->andWhere('s.id = :groupId')
               ->setParameter('groupId', $groupId);
        }
    }
}
